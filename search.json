[{"path":"https://ssi-dk.github.io/diseasy/PULL_REQUEST_TEMPLATE.html","id":"intent","dir":"","previous_headings":"","what":"Intent","title":"NA","text":"Describe briefly problem pull request resolves, new features introduces. Please link issues possible (see also “Linking pull request issue”). Trivial changes, like fixing typo, need issue.","code":""},{"path":"https://ssi-dk.github.io/diseasy/PULL_REQUEST_TEMPLATE.html","id":"approach","dir":"","previous_headings":"","what":"Approach","title":"NA","text":"issue resolved? Describe approach taken; describe non-obvious considerations made choosing approach. change covered test, please explain .","code":""},{"path":"https://ssi-dk.github.io/diseasy/PULL_REQUEST_TEMPLATE.html","id":"known-issues","dir":"","previous_headings":"","what":"Known issues","title":"NA","text":"known issues introduced pull request, please let us know. Code rarely perfect, pull request still welcome fix bigger new bug.","code":""},{"path":"https://ssi-dk.github.io/diseasy/PULL_REQUEST_TEMPLATE.html","id":"checklist","dir":"","previous_headings":"","what":"Checklist","title":"NA","text":"PR passes local unit tests documented new features introduced PR adds new feature, please add entry NEWS.md reviewer assigned PR","code":""},{"path":"https://ssi-dk.github.io/diseasy/articles/creating-a-model.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Creating a model","text":"vignette provides overview DiseasyModel class use creating diseasy model. described package introduction (vignette(\"diseasy\")), power diseasy comes combining different “functional” modules model “templates” create large ensemble models easily. DiseasyModel defines model templates look, provides mechanism functional modules loaded model templates create individual model members ensemble. dive details DiseasyModel, let’s first consider means “model template”:","code":""},{"path":"https://ssi-dk.github.io/diseasy/articles/creating-a-model.html","id":"model-templates","dir":"Articles","previous_headings":"","what":"Model Templates","title":"Creating a model","text":"Developing model diseasy involves constructing model template incorporates one functional modules model design. instance, let’s consider creation simple SIR (Susceptible, Infectious, Recovered) infection model seasonal forcing σ(t)\\sigma(t) overall infection rate, denoted . SEIR model seasonal forcing can represented following set differential equations: dS(t)dt=−β⋅σ(t)⋅S(t)⋅(t) \\frac{dS(t)}{dt} = - \\beta \\cdot \\sigma(t) \\cdot S(t) \\cdot (t) dI(t)dt=β⋅σ(t)⋅S(t)⋅(t)−γ⋅(t) \\frac{dI(t)}{dt} = \\beta \\cdot \\sigma(t) \\cdot S(t) \\cdot (t) - \\gamma \\cdot (t) dR(t)dt=γ⋅(t) \\frac{dR(t)}{dt} = \\gamma \\cdot (t) developing model traditionally, choose functional form seasonal forcing σ(t)\\sigma(t), e.g. sinusoidal relationship: σ(t)=⋅cos(k⋅t+ϕ) \\sigma(t) = \\cdot \\cos(k \\cdot t + \\phi) strategy diseasy source seasonal forcing σ(t)\\sigma(t) directly corresponding functional module (DiseasySeason). Every implementation seasonal forcing DiseasySeason function signature (.e. take single argument tt configured). way, can configure different instances DiseasySeason using whole range (available) plausible functional forms seasonal forcing: seasonal forcing (σ(t)=1\\sigma(t) = 1) Sinusoidal forcing Temperature dependent forcing plausible seasonal forcing forms Since modules diseasy “objects” object-oriented-programming sense, functional forms seasonal forcing can parameters (see list ), stored object configuring module, actual seasonal forcing exposed models function signature takes time input (σ(t)\\sigma(t))1. way, can easily swap different seasonal forcing models model templates without change model equations . new seasonal forcing models developed, automatically available developed model. philosophy behind diseasy package, since can easily swap different functional modules templates generate large ensemble models functional forms disease dynamics.","code":""},{"path":"https://ssi-dk.github.io/diseasy/articles/creating-a-model.html","id":"the-diseasymodel-class","dir":"Articles","previous_headings":"","what":"The DiseasyModel class","title":"Creating a model","text":"create model template diseasy create new class inherits DiseasyModel class. gives model template access functional modules available package, defines user sets parameters model queries model results. addition, provides useful utilities implementation model logging caching.","code":""},{"path":"https://ssi-dk.github.io/diseasy/articles/creating-a-model.html","id":"a-container-for-functional-modules","dir":"Articles","previous_headings":"The DiseasyModel class","what":"A container for functional modules","title":"Creating a model","text":"DiseasyModel class contains slots instances functional modules: $activity: {DiseasyActivity} $observables: {DiseasyObservables} $season: {DiseasySeason} $variant: {DiseasyVariant} means, new DiseasyModel instance created, functional modules internally available. Going back example SIR model seasonal forcing, model template access seasonal forcing σ(t)\\sigma(t) via call self$season$model_t(t).","code":""},{"path":"https://ssi-dk.github.io/diseasy/articles/creating-a-model.html","id":"training-data","dir":"Articles","previous_headings":"The DiseasyModel class","what":"Training data","title":"Creating a model","text":"DiseasyModel class also contains method $get_training_data() provides training data models. method interfaces DiseasyObservables module provide data observable stratification level. level stratification generally flexible parameter set user requesting results model. example, user request results country level regional level. helper method $get_training_data() provide training data observable requested level. data contain one record time point training period, columns date observation, values different (optional) stratification, value observable date, finally, integer counter day relative end training period.","code":""},{"path":"https://ssi-dk.github.io/diseasy/articles/creating-a-model.html","id":"model-user-interface","dir":"Articles","previous_headings":"The DiseasyModel class","what":"Model-user interface","title":"Creating a model","text":"Beyond providing access functional modules, DiseasyModel defines user interface model.","code":""},{"path":"https://ssi-dk.github.io/diseasy/articles/creating-a-model.html","id":"setting-parameters","dir":"Articles","previous_headings":"The DiseasyModel class > Model-user interface","what":"Setting parameters","title":"Creating a model","text":"default parameters model contained within $parameters slot model template. exposed user, logic can implemented allow user set parameters model leaving others free determined model model fitting. technical reasons2, implement private$default_parameters() slot function combines model-specific parameters inherited parameters superclasses. {r .parameters implementation, eval = FALSE}                                                                         # nolint: assignment_linter, object_usage_linter default_parameters = function() {   modifyList(     super$default_parameters(), # Obtain parameters superclasses     # Overwrite model-specific parameters     list(\"model_specific_param_1\" = 1, \"model_specific_param_2\" = \"method_1\"),     keep.null = TRUE   ) } # nolint end initialisation, evaluated single list parameters, updated user-specified values parmaters stored private$.parameters slot. parameters acccessable via $parameters.","code":""},{"path":"https://ssi-dk.github.io/diseasy/articles/creating-a-model.html","id":"validating-the-parameters","dir":"Articles","previous_headings":"The DiseasyModel class > Model-user interface > Setting parameters","what":"Validating the parameters","title":"Creating a model","text":"model template can test user provided parameters implementing private$validate_parameters() method. Note parameters may set inherited superclasses, implementation $validate_parameters() method also call parent validation method (super$validate_parameters()). {r .parameter validation implementation, eval = FALSE}                                                               # nolint: assignment_linter, object_usage_linter validate_parameters = function() {   checkmate::assert_number(self$parameters$model_specific_param_1)   checkmate::assert_choice(     self$parameters$model_specific_param_2,     c(\"method_1\", \"method_2\")   )   super$validate_parameters() } # nolint end","code":""},{"path":"https://ssi-dk.github.io/diseasy/articles/creating-a-model.html","id":"getting-results","dir":"Articles","previous_headings":"The DiseasyModel class > Model-user interface","what":"Getting results","title":"Creating a model","text":"parameters model set (either user model), user can query model results using $get_results() function. function, user provides parameters result provided (target observable, time-window stratification level). return, function returns standardised data.frame-like output can used analysis conjunction results models. outputs model standardised, follow structure training_data provided $get_training_data() enriched model prediction, model id realization id.","code":""},{"path":"https://ssi-dk.github.io/diseasy/articles/diseasy-activity.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"DiseasyActivity","text":"DiseasyActivity module responsible implementation contact matrices societal restrictions.","code":""},{"path":"https://ssi-dk.github.io/diseasy/articles/diseasy-activity.html","id":"configuring-the-module","dir":"Articles","previous_headings":"","what":"Configuring the module","title":"DiseasyActivity","text":"module can initialized without setting parameters. default, module initializes activity scenario, produces empty outputs. (See interfacing section ways get metrics module) use module, must define activity scenario. example , configure module use Danish activity units “contact basis” Denmark (.e basic contact matrices population information). NOTE: given contact basis uses counts contacts individuals rather rates. contacts counts important want project contact matrices different age groups. (see ?contact_basis details contact_basis constructed)","code":"act <- DiseasyActivity$new() act$get_scenario_openness() #> named list() act$set_activity_units(dk_activity_units) act$set_contact_basis(contact_basis$DK)  # This configuration can also be done as part of the constructor # act <- DiseasyActivity$new(activity_units = dk_activity_units #                            contact_basis = contact_basis$DK)"},{"path":"https://ssi-dk.github.io/diseasy/articles/diseasy-activity.html","id":"defining-an-activity-scenario","dir":"Articles","previous_headings":"","what":"Defining an activity scenario","title":"DiseasyActivity","text":"activity_units contact_basis supplied, can configure activity scenario. example single activity defined (baseline activity) starting 2023-01-01. get overview loaded activities, can use $get_scenario_activities() method. Calls $change_activity cumulative, means can expand existing scenario: try add activity_unit already open, module give error: default, activity units added risk modifier 1. module includes option set overall risk associated 4 types activity (“home”, “work”, “school”, “”). risk separate modifier, allows activity units describe level contacts individuals risk modifier can describe risk-mitigation measures effect contacts. modify associated risk, use $change_risk() method. create new activity scenario active instance module, can use $reset_scenario() method: scenario can also loaded directly data.frame dk_reference_scenario loaded scenario can “cropped” $crop_scenario() method.","code":"act$change_activity(date = as.Date(\"2020-01-01\"), opening = \"baseline\") act$get_scenario_activities() #> $`2020-01-01` #> [1] \"baseline\" act$change_activity(date = as.Date(\"2020-03-11\"), opening = \"lockdown_2020\", closing = \"baseline\") # NOTE: we also have to \"close\" the \"baseline\" activity unit. The activity described by this unit is # no longer in effect while the \"lockdown_2020\" activity unit is active.  act$get_scenario_activities() #> $`2020-01-01` #> [1] \"baseline\" #>  #> $`2020-03-11` #> [1] \"lockdown_2020\" act$change_activity(date = as.Date(\"2020-03-11\"), opening = \"lockdown_2020\") #> Error in act$change_activity(date = as.Date(\"2020-03-11\"), opening = \"lockdown_2020\"):  #> Some of lockdown_2020 are already open! # Mitigation measures in workplaces reduce the risk act$change_risk(date = as.Date(\"2020-03-11\"), type = \"work\", risk = 0.45)  act$risk_matrix #>        2020-01-01 2020-03-11 #> home            1       1.00 #> work            1       0.45 #> school          1       1.00 #> other           1       1.00 act$reset_scenario() act$get_scenario_activities() #> named list() print(dk_reference_scenario) #> # A tibble: 301 × 4 #>   date       opening                          closing  social_distance_work #>   <date>     <chr>                            <chr>                   <dbl> #> 1 2020-01-01 baseline                         NA                       1    #> 2 2020-03-11 NA                               baseline                 0.45 #> 3 2020-03-11 lockdown_2020                    NA                       0.45 #> 4 2020-04-15 secondary_education_phase_1_2020 NA                       0.45 #> 5 2020-04-15 private_companies_phase_1_2020   NA                       0.45 #> # ℹ 296 more rows act$change_activity(dk_reference_scenario) activities <- act$get_scenario_activities()  # NOTE: The full list of activities is too long to print in this vignette activities[1:3] #> $`2020-01-01` #> [1] \"baseline\" #>  #> $`2020-03-11` #> [1] \"lockdown_2020\" #>  #> $`2020-04-15` #> [1] \"lockdown_2020\"                     \"secondary_education_phase_1_2020\"  #> [3] \"private_companies_phase_1_2020\"    \"daycares_and_schools_phase_1_2020\" act$crop_scenario(as.Date(\"2020-03-01\"), as.Date(\"2020-04-15\")) act$get_scenario_activities() #> $`2020-03-01` #> [1] \"baseline\" #>  #> $`2020-03-11` #> [1] \"lockdown_2020\" #>  #> $`2020-04-15` #> [1] \"lockdown_2020\"                     \"secondary_education_phase_1_2020\"  #> [3] \"private_companies_phase_1_2020\"    \"daycares_and_schools_phase_1_2020\"  # NOTE: The full list of activities in the scenario is shown here # NOTE: The start date of the \"baseline\" activity is now updated to the given date"},{"path":"https://ssi-dk.github.io/diseasy/articles/diseasy-activity.html","id":"interfacing","dir":"Articles","previous_headings":"","what":"Interfacing with the activity scenario","title":"DiseasyActivity","text":"examples, reduce activity scenario just single activity: activity scenario loaded, query module different ways get contact metrics module scenario.","code":"act$reset_scenario() act$change_activity(date = as.Date(\"2020-03-11\"), opening = \"baseline\")"},{"path":"https://ssi-dk.github.io/diseasy/articles/diseasy-activity.html","id":"contact-matrices","dir":"Articles","previous_headings":"Interfacing with the activity scenario","what":"Contact matrices","title":"DiseasyActivity","text":"Several disease models uses contact matrices structure populations. retrieve contact matrices module, use $get_scenario_contacts() method: DiseasyActivity module provides separate matrices four arenas: “home”, “school”, “work”, “”. matrices can combined supplying weights argument $get_scenario_contacts() method.","code":"# We can project the matrices into custom age-groups by providing the \"age_cuts_lower\" argument act$get_scenario_contacts(age_cuts_lower = c(0, 60)) #> $`2020-03-11` #> $`2020-03-11`$home #>       00-59 60+ #> 00-59   4.4 0.9 #> 60+     2.6 1.3 #>  #> $`2020-03-11`$work #>       00-59   60+ #> 00-59  1.97 0.096 #> 60+    0.28 0.020 #>  #> $`2020-03-11`$school #>       00-59     60+ #> 00-59 1.497 4.0e-03 #> 60+   0.011 9.6e-05 #>  #> $`2020-03-11`$other #>       00-59  60+ #> 00-59   4.4 0.67 #> 60+     1.9 1.40 act$get_scenario_contacts(age_cuts_lower = c(0, 20, 40, 60, 80), weights = c(1, 1, 1, 1)) #> $`2020-03-11` #>       00-19 20-39 40-59 60-79  80+ #> 00-19  8.72   3.0   2.6   1.1 0.18 #> 20-39  2.66   6.0   3.7   1.5 0.19 #> 40-59  2.21   3.5   4.7   1.7 0.28 #> 60-79  1.15   1.7   2.2   2.6 0.31 #> 80+    0.83   1.0   1.6   1.4 0.27"},{"path":"https://ssi-dk.github.io/diseasy/articles/diseasy-activity.html","id":"societal-openness","dir":"Articles","previous_headings":"Interfacing with the activity scenario","what":"Societal openness","title":"DiseasyActivity","text":"simpler metric societal activity degree “openness”, .e. degree activity limited relative open society. value ranges 1 (normal activity) 0 (activity). degree openness can queried similarly contact matrices:","code":"act$get_scenario_openness() #> $`2020-03-11` #> $`2020-03-11`$home #> 00-04 05-09 10-14 15-19 20-24 25-29 30-34 35-39 40-44 45-49 50-54 55-59 60-64  #>     1     1     1     1     1     1     1     1     1     1     1     1     1  #> 65-69 70-74   75+  #>     1     1     1  #>  #> $`2020-03-11`$work #> 00-04 05-09 10-14 15-19 20-24 25-29 30-34 35-39 40-44 45-49 50-54 55-59 60-64  #>     1     1     1     1     1     1     1     1     1     1     1     1     1  #> 65-69 70-74   75+  #>     1     1     1  #>  #> $`2020-03-11`$school #> 00-04 05-09 10-14 15-19 20-24 25-29 30-34 35-39 40-44 45-49 50-54 55-59 60-64  #>     1     1     1     1     1     1     1     1     1     1     1     1     1  #> 65-69 70-74   75+  #>     1     1     1  #>  #> $`2020-03-11`$other #> 00-04 05-09 10-14 15-19 20-24 25-29 30-34 35-39 40-44 45-49 50-54 55-59 60-64  #>     1     1     1     1     1     1     1     1     1     1     1     1     1  #> 65-69 70-74   75+  #>     1     1     1 act$get_scenario_openness(age_cuts_lower = c(0, 20, 40, 60, 80), weights = c(1, 1, 1, 1)) #> $`2020-03-11` #> 00-19 20-39 40-59 60-79   80+  #>     1     1     1     1     1"},{"path":"https://ssi-dk.github.io/diseasy/articles/diseasy-activity.html","id":"inspecting-the-module","dir":"Articles","previous_headings":"","what":"Inspecting the module","title":"DiseasyActivity","text":"saw , can use $describe() method get human readable summary module can also inspect individual elements module carefully $scenario_matrix $risk_matrix. provide internal representation loaded scenario.","code":"act$describe() #> # DiseasyActivity ############################################ #> Scenario: Overview #>          2020-03-11 #> baseline          1 #>  #> Contact basis: Contact matrices for Denmark from the `contactdata` package and population data for #> Denmark from the US Census Bureau. act$scenario_matrix #>          2020-03-11 #> baseline          1 act$risk_matrix #>        2020-03-11 #> home            1 #> work            1 #> school          1 #> other           1"},{"path":"https://ssi-dk.github.io/diseasy/articles/diseasy-observables.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"DiseasyObservables","text":"DiseasyObservables module module responsible providing disease data models. module primarily wrapper around diseasystores means available data depend specific diseasystore used.","code":""},{"path":"https://ssi-dk.github.io/diseasy/articles/diseasy-observables.html","id":"configuring-the-module","dir":"Articles","previous_headings":"","what":"Configuring the module","title":"DiseasyObservables","text":"module needs configuration initialized. can set options. Primarily, need specify diseasystore see data comes underlying diseasystore can query module. check current status module, $describe() method can used:","code":"obs <- DiseasyObservables$new(   conn = DBI::dbConnect(RSQLite::SQLite()) ) # NOTE: Alternatively we could set options(\"diseasy.conn\" = ...)  obs$set_diseasystore(diseasystore = \"Google COVID-19\") obs$available_observables #> [1] \"n_population\" \"n_hospital\"   \"n_deaths\"     \"n_positive\"   \"n_icu\"        #> [6] \"n_ventilator\" obs$available_stratifications #> [1] \"age_group\"       \"country_id\"      \"country\"         \"region_id\"       #> [5] \"region\"          \"subregion_id\"    \"subregion\"       \"min_temperature\" #> [9] \"max_temperature\" obs$describe() #> # DiseasyObservables ######################################### #> diseasystore set to: Google COVID-19 #> Study period is not set #> last_queryable_date is not set"},{"path":"https://ssi-dk.github.io/diseasy/articles/diseasy-observables.html","id":"getting-observations","dir":"Articles","previous_headings":"","what":"Getting observations","title":"DiseasyObservables","text":"can query model give data given observable given time frame: want stratify data, supply stratification argument. argument designed flexible, means need wrapped rlang::quos(). see , . Since stratification flexible, can programmatically stratify:","code":"obs$get_observation(observable = \"n_population\",                     start_date = as.Date(\"2020-03-01\"),                     end_date = as.Date(\"2020-05-01\")) #> # A tibble: 62 × 2 #>   date       n_population #>   <date>            <dbl> #> 1 2020-03-01    630535711 #> 2 2020-03-02    630535711 #> 3 2020-03-03    630535711 #> 4 2020-03-04    630535711 #> 5 2020-03-05    630535711 #> # ℹ 57 more rows  # NOTE: \"target_conn\" is a SQLite data base which has \"numeric\" as the \"date\" type. # NOTE: The population here is not stratified, so covers all countries in the Google data obs$get_observation(observable = \"n_hospital\",                     stratification = rlang::quos(age_group),                     start_date = as.Date(\"2020-03-01\"),                     end_date = as.Date(\"2020-05-01\")) #> # A tibble: 620 × 3 #>   date       age_group n_hospital #>   <date>     <chr>          <dbl> #> 1 2020-03-01 00-09              0 #> 2 2020-03-02 00-09              1 #> 3 2020-03-03 00-09              0 #> 4 2020-03-04 00-09              2 #> 5 2020-03-05 00-09              2 #> # ℹ 615 more rows obs$get_observation(observable = \"n_hospital\",                     stratification = rlang::quos(young_age_groups =                                                    age_group %in% c(\"00-09\", \"10-19\")),                     start_date = as.Date(\"2020-03-01\"),                     end_date = as.Date(\"2020-05-01\")) #> # A tibble: 124 × 3 #>   date       young_age_groups n_hospital #>   <date>                <int>      <dbl> #> 1 2020-03-01                0          2 #> 2 2020-03-02                0          5 #> 3 2020-03-03                0          5 #> 4 2020-03-04                0         10 #> 5 2020-03-05                0          6 #> # ℹ 119 more rows  # NOTE: \"target_conn\" is a SQLite data base which has \"numeric\" as the \"boolean\" type."},{"path":"https://ssi-dk.github.io/diseasy/articles/diseasy-season.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"DiseasySeason","text":"DiseasySeason module responsible implementation different models seasonal dependency disease.","code":""},{"path":"https://ssi-dk.github.io/diseasy/articles/diseasy-season.html","id":"configuring-the-module","dir":"Articles","previous_headings":"","what":"Configuring the module","title":"DiseasySeason","text":"module can initialized without setting parameters. Note models require parameter reference_date set can done initialization module. see season models comes module can query module. default, module initializes constant_season() model. check current status module, including model set, $describe() method can used: season model set, interfacing model happens $model_t() $model_date() methods.   use models season, module provides functions form $use_*_season(). example, configure module use cosine season instead can use $use_cosine_season() re-configured models stored $model_t $model_date change new model:  Note models, constant_season scale parameter. scale parameter sets relative difference minimum maximum season effect model. example, scale = 0.25, effect season never drop 25% maximum.  models may additional parameters control shape. See documentation module learn specific models.","code":"s <- DiseasySeason$new(reference_date = as.Date(\"2020-03-01\")) s$available_season_models #> [1] \"constant_season\" \"cosine_season\"   \"covid_season_v1\" \"covid_season_v2\" s$describe() #> # DiseasySeason ############################################## #> Season model: constant_season #> Constant (no) seasonality model. #> Risk of infection constant through year #> Reference date: 2020-03-01 t <- 0:365 plot(t, purrr::map_dbl(t, s$model_t),      type = \"l\", lwd = 2,      xlab = \"Days past reference date\",      ylab = \"Relative effect of season\",      ylim = c(0, 1.25), xaxs = \"i\", yaxs = \"i\") d <- s$reference_date + 0:365 plot(d, purrr::map_dbl(d, s$model_date),      type = \"l\", lwd = 2,      xlab = \"\",      ylab = \"Relative effect of season\",      ylim = c(0, 1.25), xaxs = \"i\", yaxs = \"i\") s$use_cosine_season() d <- s$reference_date + 0:365 plot(d, purrr::map_dbl(d, s$model_date),      type = \"l\", lwd = 2,      xlab = \"\",      ylab = \"Relative effect of season\",      ylim = c(0, 1.25), xaxs = \"i\", yaxs = \"i\") s$set_scale(0.25)  d <- s$reference_date + 0:365 plot(d, purrr::map_dbl(d, s$model_date),      type = \"l\", lwd = 2,      xlab = \"\",      ylab = \"Relative effect of season\",      ylim = c(0, 1.25), xaxs = \"i\", yaxs = \"i\")"},{"path":"https://ssi-dk.github.io/diseasy/articles/diseasy-variant.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"DiseasyVariant","text":"DiseasyVariant module responsible implementation variants.","code":""},{"path":"https://ssi-dk.github.io/diseasy/articles/diseasy-variant.html","id":"configuring-the-module","dir":"Articles","previous_headings":"","what":"Configuring the module","title":"DiseasyVariant","text":"module can initialized without setting parameters. default, module initializes variant scenario, produces non-informative outputs. define variant scenario, manually add variants interest characteristics. example , add wild-type variant mutant variant named “Alpha”. example, perfect cross immunity variants (since specify otherwise). interactions DiseasyVariant captured via $cross_immunity, matrix showing overlap immunity variants. can inspect cross immunity matrix via $cross_immunity.","code":"variant <- DiseasyVariant$new() variant$variants #> NULL variant$add_variant(name = \"WT\") variant$add_variant(   name = \"Alpha\",   characteristics = list(     \"relative_infection_risk\" = 1.5,     \"introduction_date\" = as.Date(\"2020-12-01\")   ) )  variant$variants #> $WT #> list() #>  #> $Alpha #> $Alpha$relative_infection_risk #> [1] 1.5 #>  #> $Alpha$introduction_date #> [1] \"2020-12-01\" variant$cross_immunity #>       WT Alpha #> WT     1     1 #> Alpha  1     1"},{"path":"https://ssi-dk.github.io/diseasy/articles/diseasy-variant.html","id":"cross-immunity-interactions","dir":"Articles","previous_headings":"Configuring the module","what":"Cross immunity interactions","title":"DiseasyVariant","text":"variants different levels cross immunity, can specify cross_immunity characteristic initialisation. add variant 85% cross immunity wild-type Alpha variant. , Delta variant infects host previously infected wild-type Alpha variant, protection provided natural immunity host reduced 15%. cross immunity asymmetric, meaning wild-type Alpha variant infects host previously infected Delta variant, protection provided immunisation Delta variant reduced.","code":"variant$add_variant(   name = \"Delta\",   characteristics = list(     \"introduction_date\" = as.Date(\"2021-05-01\"),     \"cross_immunity\" = list(\"WT\" = 0.85, \"Alpha\" = 0.85)   ) )  variant$cross_immunity #>         WT Alpha Delta #> WT    1.00  1.00     1 #> Alpha 1.00  1.00     1 #> Delta 0.85  0.85     1"},{"path":"https://ssi-dk.github.io/diseasy/articles/diseasy-variant.html","id":"summarising-the-scenario","dir":"Articles","previous_headings":"","what":"Summarising the scenario","title":"DiseasyVariant","text":"diseasy modules, $describe() method can used get human readable summary scenario.","code":"variant$describe() #> # DiseasyVariant ############################################# #> Variant: WT #> Variant: Alpha #>  - relative_infection_risk: 1.5 #>  - introduction_date: 2020-12-01 #> Variant: Delta #>  - introduction_date: 2021-05-01 #>  - cross_immunity: 0.85 - cross_immunity: 0.85 #> Cross immunity interactions: #> (Index ij indicates variant j infecting host with immunity i) #> 110.85110.85111"},{"path":"https://ssi-dk.github.io/diseasy/articles/diseasy.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"diseasy: quick start guide","text":"diseasy package large scope aims provide infrastructure easily create large ensemble disease models. building disease models achieved via modular design philosophy. end, number “functional” modules feed “model” modules.","code":""},{"path":"https://ssi-dk.github.io/diseasy/articles/diseasy.html","id":"functional-modules","dir":"Articles","previous_headings":"Overview","what":"Functional modules","title":"diseasy: quick start guide","text":"functional modules smaller modules meant defined purposes. modules “atomic” form building blocks ensembles. currently available functional modules : functional module restricted covering single functionality use models (sometimes functional modules). example, DiseasySeason defines number models season dependency disease. module single defined purpose (modelling effect season) provides number different models describing possible season dependencies: see later, different models season dependency used construct ensembles. season models similar functional signatures (.e. function calls models similar). way, create disease model, can use module implement different models season dependency disease models easily. modules functionality implement. example, module DiseasyObservables responsible providing data models modules. DiseasySeason, means models season dependency can use real-world data, temperature, season models. use modules varied module comes vignette describing usage: vignette(\"DiseasyActivity\"), vignette(\"DiseasyObservables\"), vignette(\"DiseasySeason\"), vignette(\"DiseasyVariant\").","code":"ls(\"package:diseasy\") |>   purrr::keep(~ stringr::str_detect(., pattern = \"Diseasy(?!(BaseModule|Model.*))\")) #> [1] \"DiseasyActivity\"    \"DiseasyObservables\" \"DiseasySeason\"      #> [4] \"DiseasyVariant\" s <- DiseasySeason$new() s$available_season_models #> [1] \"constant_season\" \"cosine_season\"   \"covid_season_v1\" \"covid_season_v2\""},{"path":"https://ssi-dk.github.io/diseasy/articles/diseasy.html","id":"model-modules","dir":"Articles","previous_headings":"Overview","what":"Model modules","title":"diseasy: quick start guide","text":"stated , functional modules provide functionality disease models. currently available model modules : Presently, models included package. come following releases.","code":"ls(\"package:diseasy\", pattern = \"DiseasyModel.+\") #> character(0)"},{"path":"https://ssi-dk.github.io/diseasy/articles/diseasy.html","id":"configuring","dir":"Articles","previous_headings":"Overview","what":"Configuring","title":"diseasy: quick start guide","text":"diseasy modules build top DiseasyBaseModule class. class provides number features common modules, logging caching.","code":""},{"path":"https://ssi-dk.github.io/diseasy/articles/diseasy.html","id":"caching","dir":"Articles","previous_headings":"Overview > Configuring","what":"Caching","title":"diseasy: quick start guide","text":"Internally, modules may use cachem cache computations either memory disk. control caching done, can provide cache argument module constructor containing cachem cache object, can set option diseasy.cache cachem cache object. See ?DiseasyBaseModule information.","code":""},{"path":"https://ssi-dk.github.io/diseasy/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Rasmus Skytte Randløv. Author, maintainer. Marcus Munch Grünewald. Author. Lasse Engbo Christiansen. Author. Kaare Græsbøll. Author. . Copyright holder, funder.","code":""},{"path":"https://ssi-dk.github.io/diseasy/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Randløv R, Grünewald M, Christiansen L, Græsbøll K (2024). diseasy: Disease Ensemble Modelling Made Easy. R package version 0.0.0.9000, https://github.com/ssi-dk/diseasy.","code":"@Manual{,   title = {diseasy: Disease Ensemble Modelling Made Easy},   author = {Rasmus Skytte Randløv and Marcus Munch Grünewald and Lasse Engbo Christiansen and Kaare Græsbøll},   year = {2024},   note = {R package version 0.0.0.9000},   url = {https://github.com/ssi-dk/diseasy}, }"},{"path":[]},{"path":"https://ssi-dk.github.io/diseasy/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Disease Ensemble Modelling Made Easy","text":"diseasystore package provides feature stores implemented R specifically designed serve disease data epidemic preparedness. makes diseasystore special, features can automatically coupled stratified within diseasystore package. Consult Quick start vignette see action (vignette(\"quick-start\", package = \"diseasystore\")). package forms data-backbone diseasy package.","code":""},{"path":"https://ssi-dk.github.io/diseasy/index.html","id":"handling-of-diverse-data-sources","dir":"","previous_headings":"","what":"Handling of diverse data sources","title":"Disease Ensemble Modelling Made Easy","text":"Different data sources handled individual diseasystores facilitate access relevant disease data given data source. Data different diseases typically structured different ways. diseasystore package currently implements Google Health COVID-19 Open Repository one diseasystores way. diseasystore package designed handled individual-level data (examples come) semi-aggregated (typically publicly available) data. data individual-level, feature store fully dynamic can adapt (virtually) stratification user specifies. data conversely semi-aggregated, data can stratified levels semi-aggregation (higher levels).","code":""},{"path":"https://ssi-dk.github.io/diseasy/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Disease Ensemble Modelling Made Easy","text":"","code":"# Install diseasy from CRAN: install.packages(\"diseasy\")  # Alternatively, install the development version from github: # install.packages(\"devtools\") devtools::install_github(\"ssi-dk/diseasy\")"},{"path":"https://ssi-dk.github.io/diseasy/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Disease Ensemble Modelling Made Easy","text":"basic usage examples, see vignette(\"quick-start\").","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyActivity.html","id":null,"dir":"Reference","previous_headings":"","what":"Activity handler — DiseasyActivity","title":"Activity handler — DiseasyActivity","text":"DiseasyActivity module responsible handling societal activity. providing contact_basis, activity_units scenario module, module provides activity matrices throughout scenario (flexible age-groupings) well overall \"activity\" level society. contact_basis contains information : - contact matrices (contact rates age groups) - population (size proportion population age groups) activity_units projects restrictions, guidelines changes activity smaller \"units\" independently \"opened\" \"closed\". Opening (closing) activity unit means activity described unit ()active. scenario contains information different activity_units opened closed See vignette(\"diseasy-activity\") examples use.","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyActivity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Activity handler — DiseasyActivity","text":"new instance DiseasyActivity R6 class.","code":""},{"path":[]},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyActivity.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Activity handler — DiseasyActivity","text":"diseasy::DiseasyBaseModule -> DiseasyActivity","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyActivity.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Activity handler — DiseasyActivity","text":"scenario_matrix (matrix array) reduced view internal state restrictions (showing used activity units). Read-. risk_matrix (matrix array) reduced view internal state overall risk multipliers. Read-. contact_basis (list(list())) nested list needed information contact_basis * counts contains age stratified contact counts across arenas basis   (e.g. 'work', 'home', 'school', '') * proportion contains list proportion population age-group * demography contains data.frame columns   * age (integer()) 1-year age group   * population (numeric()) size population age group   * proportion (numeric()) proportion total population age group * description contains information source contact basis. Read .","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyActivity.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Activity handler — DiseasyActivity","text":"diseasy::DiseasyBaseModule$finalize() diseasy::DiseasyBaseModule$load_module() diseasy::DiseasyBaseModule$set_moduleowner()","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyActivity.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Activity handler — DiseasyActivity","text":"DiseasyActivity$new() DiseasyActivity$set_activity_units() DiseasyActivity$set_contact_basis() DiseasyActivity$change_activity() DiseasyActivity$change_risk() DiseasyActivity$crop_scenario() DiseasyActivity$get_scenario_activities() DiseasyActivity$get_scenario_openness() DiseasyActivity$get_scenario_contacts() DiseasyActivity$rescale_counts_to_rates() DiseasyActivity$reset_scenario() DiseasyActivity$describe() DiseasyActivity$clone()","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyActivity.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Activity handler — DiseasyActivity","text":"Creates new instance DiseasyActivity R6 class.","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyActivity.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Activity handler — DiseasyActivity","text":"","code":"DiseasyActivity$new(   base_scenario = \"closed\",   activity_units = NULL,   contact_basis = NULL,   ... )"},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyActivity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Activity handler — DiseasyActivity","text":"base_scenario (character(1)) Baseline scenario. Must either fully \"open\" \"closed\" \"dk_reference\" activity_units (list(list())) nested list possible 'units' activity can opened closed. contact_basis (list(list())) nested list needed information contact_basis * counts contains age stratified contact counts across arenas basis   (e.g. 'work', 'home', 'school', '') * proportion contains list proportion population age-group * demography contains data.frame columns   * age (integer()) 1-year age group   * population (numeric()) size population age group   * proportion (numeric()) proportion total population age group * description contains information source contact basis. ... Parameters sent DiseasyBaseModule R6 constructor","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyActivity.html","id":"method-set-activity-units-","dir":"Reference","previous_headings":"","what":"Method set_activity_units()","title":"Activity handler — DiseasyActivity","text":"Sets list possible \"units\" activity can opened closed","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyActivity.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Activity handler — DiseasyActivity","text":"","code":"DiseasyActivity$set_activity_units(activity_units)"},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyActivity.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Activity handler — DiseasyActivity","text":"activity_units (list(list())) nested list possible 'units' activity can opened closed.","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyActivity.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Activity handler — DiseasyActivity","text":"element activity_units list list following elements: activity: programmatic short hand activity (character, snake_case), label: human readable label activity (character), home:   numeric/vector number(s) [0, 1] work:   numeric/vector number(s) [0, 1] school: numeric/vector number(s) [0, 1] :  numeric/vector number(s) [0, 1] risk:   numeric greater zero single number provider, number applied across age-groups vector provided, vector must match number age groups contact_basis","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyActivity.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Activity handler — DiseasyActivity","text":"NULL (called side effects)","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyActivity.html","id":"method-set-contact-basis-","dir":"Reference","previous_headings":"","what":"Method set_contact_basis()","title":"Activity handler — DiseasyActivity","text":"Sets contact matrix basis activity computed ","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyActivity.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Activity handler — DiseasyActivity","text":"","code":"DiseasyActivity$set_contact_basis(contact_basis)"},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyActivity.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Activity handler — DiseasyActivity","text":"contact_basis (list(list())) nested list needed information contact_basis * counts contains age stratified contact counts across arenas basis   (e.g. 'work', 'home', 'school', '') * proportion contains list proportion population age-group * demography contains data.frame columns   * age (integer()) 1-year age group   * population (numeric()) size population age group   * proportion (numeric()) proportion total population age group * description contains information source contact basis.","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyActivity.html","id":"details-1","dir":"Reference","previous_headings":"","what":"Details","title":"Activity handler — DiseasyActivity","text":"Loads given contact_basis module","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyActivity.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Activity handler — DiseasyActivity","text":"NULL (called side effects)","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyActivity.html","id":"method-change-activity-","dir":"Reference","previous_headings":"","what":"Method change_activity()","title":"Activity handler — DiseasyActivity","text":"Adds specified openings closings scenario","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyActivity.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Activity handler — DiseasyActivity","text":"","code":"DiseasyActivity$change_activity(date, opening = NA, closing = NA)"},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyActivity.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Activity handler — DiseasyActivity","text":"date (Date() | data.frame) Either vector dates activity changes data.frame columns 'date', 'opening' 'closing' opening (character()) Names activities open given date. Omitted data.frame given date argument closing (character()) Names activities close given date. Omitted data.frame given date argument","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyActivity.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"Activity handler — DiseasyActivity","text":"NULL (called side effects)","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyActivity.html","id":"method-change-risk-","dir":"Reference","previous_headings":"","what":"Method change_risk()","title":"Activity handler — DiseasyActivity","text":"Sets overall risk types activity","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyActivity.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Activity handler — DiseasyActivity","text":"","code":"DiseasyActivity$change_risk(date, type = NULL, risk = NULL)"},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyActivity.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Activity handler — DiseasyActivity","text":"date (Date()) Dates risk changes. first argument can also data.frame columns \"date\", \"type\" \"risk\" type (character(1)) Name activity type change. Must \"work\", \"school\", \"home\" \"\" risk (numeric(1)) Relative risk given type given date","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyActivity.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"Activity handler — DiseasyActivity","text":"NULL (called side effects)","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyActivity.html","id":"method-crop-scenario-","dir":"Reference","previous_headings":"","what":"Method crop_scenario()","title":"Activity handler — DiseasyActivity","text":"Helper function crop scenario matrix time","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyActivity.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Activity handler — DiseasyActivity","text":"","code":"DiseasyActivity$crop_scenario(first_date = NULL, last_date = NULL)"},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyActivity.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"Activity handler — DiseasyActivity","text":"first_date (Date(1)) New first date scenario. column lasted prior date new first column last_date (Date(1)) columns date deleted","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyActivity.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"Activity handler — DiseasyActivity","text":"NULL (called side effects)","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyActivity.html","id":"method-get-scenario-activities-","dir":"Reference","previous_headings":"","what":"Method get_scenario_activities()","title":"Activity handler — DiseasyActivity","text":"Return list containing active activity units dates changes.","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyActivity.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Activity handler — DiseasyActivity","text":"","code":"DiseasyActivity$get_scenario_activities()"},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyActivity.html","id":"returns-5","dir":"Reference","previous_headings":"","what":"Returns","title":"Activity handler — DiseasyActivity","text":"(list) activity units active scenario.","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyActivity.html","id":"method-get-scenario-openness-","dir":"Reference","previous_headings":"","what":"Method get_scenario_openness()","title":"Activity handler — DiseasyActivity","text":"Return openness [0 ; 1] age groups activities dates.","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyActivity.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"Activity handler — DiseasyActivity","text":"","code":"DiseasyActivity$get_scenario_openness(age_cuts_lower = NULL, weights = NULL)"},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyActivity.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"Activity handler — DiseasyActivity","text":"age_cuts_lower (numeric) vector ages defining lower bound age group. NULL (default), age groups contact_basis used. weights (numeric(4)) vector weights four types contacts. NULL (default), weighting done. weights normalized applying.","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyActivity.html","id":"returns-6","dir":"Reference","previous_headings":"","what":"Returns","title":"Activity handler — DiseasyActivity","text":"(list()) Returns list depth two: value[date][type]","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyActivity.html","id":"method-get-scenario-contacts-","dir":"Reference","previous_headings":"","what":"Method get_scenario_contacts()","title":"Activity handler — DiseasyActivity","text":"Return contacts across age groups activities dates.","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyActivity.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"Activity handler — DiseasyActivity","text":"","code":"DiseasyActivity$get_scenario_contacts(age_cuts_lower = NULL, weights = NULL)"},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyActivity.html","id":"arguments-7","dir":"Reference","previous_headings":"","what":"Arguments","title":"Activity handler — DiseasyActivity","text":"age_cuts_lower (numeric) vector ages defining lower bound age group. NULL (default), age groups contact_basis used. weights (numeric(4)) vector weights four types contacts. NULL (default), weighting done.","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyActivity.html","id":"returns-7","dir":"Reference","previous_headings":"","what":"Returns","title":"Activity handler — DiseasyActivity","text":"weights supplied, list() depth two: value[date][type] returned. Rescale contact matrices population contact rates","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyActivity.html","id":"method-rescale-counts-to-rates-","dir":"Reference","previous_headings":"","what":"Method rescale_counts_to_rates()","title":"Activity handler — DiseasyActivity","text":"Re-scale contacts rates per individual fractional population.","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyActivity.html","id":"usage-9","dir":"Reference","previous_headings":"","what":"Usage","title":"Activity handler — DiseasyActivity","text":"","code":"DiseasyActivity$rescale_counts_to_rates(input, population)"},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyActivity.html","id":"arguments-8","dir":"Reference","previous_headings":"","what":"Arguments","title":"Activity handler — DiseasyActivity","text":"input (matrix array list(matrix array)) Counts re-scaled. population (numeric) Population vector weight contacts . Must use age_groups contact matrix input.","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyActivity.html","id":"returns-8","dir":"Reference","previous_headings":"","what":"Returns","title":"Activity handler — DiseasyActivity","text":"Returns object structure input","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyActivity.html","id":"method-reset-scenario-","dir":"Reference","previous_headings":"","what":"Method reset_scenario()","title":"Activity handler — DiseasyActivity","text":"Resets scenario module. NOTE: Called automatically setting/changing activity units.","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyActivity.html","id":"usage-10","dir":"Reference","previous_headings":"","what":"Usage","title":"Activity handler — DiseasyActivity","text":"","code":"DiseasyActivity$reset_scenario()"},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyActivity.html","id":"returns-9","dir":"Reference","previous_headings":"","what":"Returns","title":"Activity handler — DiseasyActivity","text":"NULL (called side effects)","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyActivity.html","id":"method-describe-","dir":"Reference","previous_headings":"","what":"Method describe()","title":"Activity handler — DiseasyActivity","text":"Prints human readable report internal state module.","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyActivity.html","id":"usage-11","dir":"Reference","previous_headings":"","what":"Usage","title":"Activity handler — DiseasyActivity","text":"","code":"DiseasyActivity$describe()"},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyActivity.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Activity handler — DiseasyActivity","text":"objects class cloneable method.","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyActivity.html","id":"usage-12","dir":"Reference","previous_headings":"","what":"Usage","title":"Activity handler — DiseasyActivity","text":"","code":"DiseasyActivity$clone(deep = FALSE)"},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyActivity.html","id":"arguments-9","dir":"Reference","previous_headings":"","what":"Arguments","title":"Activity handler — DiseasyActivity","text":"deep Whether make deep clone.","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyActivity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Activity handler — DiseasyActivity","text":"","code":"# Activity module with Danish reference scenario   act <- DiseasyActivity$new(base_scenario = \"dk_reference\",                              activity_units = dk_activity_units,                              contact_basis = contact_basis %.% DK)    # Get contact matrices   contact_matrices <- act$get_scenario_activities()     # Configuring a custom scenario in another country (using Danish activity units)   scenario <- data.frame(date = as.Date(character(0)),                          opening = character(0),                          closing = character(0)) |>     dplyr::add_row(date = as.Date(\"2020-01-01\"), opening = \"baseline\",      closing = NA) |>     dplyr::add_row(date = as.Date(\"2020-03-12\"), opening = NA,              closing = \"baseline\") |>     dplyr::add_row(date = as.Date(\"2020-03-12\"), opening = \"lockdown_2020\", closing = NA)    act$set_contact_basis(contact_basis %.% GB) # Use the \"Great Britain\" contact_basis   act$set_activity_units(dk_activity_units)   act$change_activity(scenario)    # Get societal \"openness\"   openness <- act$get_scenario_openness()    rm(act)"},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyBaseModule.html","id":null,"dir":"Reference","previous_headings":"","what":"Base module for diseasy — DiseasyBaseModule","title":"Base module for diseasy — DiseasyBaseModule","text":"DiseasyBaseModule module implements common functionality modules available. notably, base module facilitates: logging: lgr logger configured making module inherits base module. logger stored private$lg. hashing: active binding self$hash hashes values public fields provide way uniquely identify configuration modules. Care must taken ensure information makes modules distinct also stored public fields. , important property stored private field, hash change. Module-specific tests written ensure hash changes expected. caching: methods private$cache(), private$get_hash() private$is_cached(hash) implements simple caching system whereby results method calls can cached improve performance modules. module loading: Modules instances sometimes loaded modules. private$load_module(module) method provides functionality handle loading (including cloning module passing new module already-loaded modules)","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyBaseModule.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Base module for diseasy — DiseasyBaseModule","text":"new instance DiseasyBaseModule R6 class.","code":""},{"path":[]},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyBaseModule.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Base module for diseasy — DiseasyBaseModule","text":"hash (character) Computes hash value module. Useful logging caching. Read .","code":""},{"path":[]},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyBaseModule.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Base module for diseasy — DiseasyBaseModule","text":"DiseasyBaseModule$new() DiseasyBaseModule$set_moduleowner() DiseasyBaseModule$load_module() DiseasyBaseModule$finalize() DiseasyBaseModule$clone()","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyBaseModule.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Base module for diseasy — DiseasyBaseModule","text":"Creates new instance DiseasyBaseModule R6 class. module typically constructed directly rather derived classes.","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyBaseModule.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Base module for diseasy — DiseasyBaseModule","text":"","code":"DiseasyBaseModule$new(   moduleowner = class(self)[1],   logging = diseasyoption(\"logging\", self),   cache = diseasyoption(\"cache\", self, .default = cachem::cache_mem(max_size = Inf)) )"},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyBaseModule.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Base module for diseasy — DiseasyBaseModule","text":"moduleowner (character) name moduleowner. Used logging. logging (boolean) logging enabled? cache (cachem) cache generated cachem use caching results.","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyBaseModule.html","id":"method-set-moduleowner-","dir":"Reference","previous_headings":"","what":"Method set_moduleowner()","title":"Base module for diseasy — DiseasyBaseModule","text":"Changes \"ownership\" module. Used logging.","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyBaseModule.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Base module for diseasy — DiseasyBaseModule","text":"","code":"DiseasyBaseModule$set_moduleowner(moduleowner)"},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyBaseModule.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Base module for diseasy — DiseasyBaseModule","text":"moduleowner (character) name moduleowner.","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyBaseModule.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Base module for diseasy — DiseasyBaseModule","text":"NULL","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyBaseModule.html","id":"method-load-module-","dir":"Reference","previous_headings":"","what":"Method load_module()","title":"Base module for diseasy — DiseasyBaseModule","text":"Loads copy provided module module.","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyBaseModule.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Base module for diseasy — DiseasyBaseModule","text":"","code":"DiseasyBaseModule$load_module(module, clone = TRUE)"},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyBaseModule.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Base module for diseasy — DiseasyBaseModule","text":"module (R6::R6Class instance) instance cloned field name class module clone (boolean) Toggle whether module cloned loading. Default TRUE.","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyBaseModule.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Base module for diseasy — DiseasyBaseModule","text":"methods allows setting internal module instances instance created.","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyBaseModule.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Base module for diseasy — DiseasyBaseModule","text":"NULL","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyBaseModule.html","id":"method-finalize-","dir":"Reference","previous_headings":"","what":"Method finalize()","title":"Base module for diseasy — DiseasyBaseModule","text":"Handles clean-class","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyBaseModule.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Base module for diseasy — DiseasyBaseModule","text":"","code":"DiseasyBaseModule$finalize()"},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyBaseModule.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Base module for diseasy — DiseasyBaseModule","text":"objects class cloneable method.","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyBaseModule.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Base module for diseasy — DiseasyBaseModule","text":"","code":"DiseasyBaseModule$clone(deep = FALSE)"},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyBaseModule.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Base module for diseasy — DiseasyBaseModule","text":"deep Whether make deep clone.","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyBaseModule.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Base module for diseasy — DiseasyBaseModule","text":"","code":"# Normally, you would not want to create this module directly, but it is possible.   base_module <- DiseasyBaseModule$new()    rm(base_module)"},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyModel.html","id":null,"dir":"Reference","previous_headings":"","what":"Base module for diseasy model templates — DiseasyModel","title":"Base module for diseasy model templates — DiseasyModel","text":"DiseasyModel module implements common functionality models available beyond provided DiseasyBaseModule. notably, model module facilitates: Module interfaces: module contains functional modules via active bindings: $activity: DiseasyActivity $observables: DiseasyObservables $season: DiseasySeason $variant : DiseasyVariant Configured instances modules can provided initialisation. Alternatively, default instances modules can optionally created. Model interface: module defines functions $get_results(), $get_training_data() $parameters binding. functions define \"API\" models ensure models can take part ensemble.","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyModel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Base module for diseasy model templates — DiseasyModel","text":"new instance DiseasyModel R6 class.","code":""},{"path":[]},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyModel.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Base module for diseasy model templates — DiseasyModel","text":"diseasy::DiseasyBaseModule -> DiseasyModel","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyModel.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Base module for diseasy model templates — DiseasyModel","text":"activity (diseasy::activity) local copy activity module. Read-. observables (diseasy::DiseasyObservables) local copy DiseasyObservables module. Read-. season (diseasy::season) local copy season module. Read-. variant (diseasy::variant) local copy variant module. Read-. parameters (list()) parameters used model. Read-.","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyModel.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Base module for diseasy model templates — DiseasyModel","text":"diseasy::DiseasyBaseModule$finalize() diseasy::DiseasyBaseModule$load_module() diseasy::DiseasyBaseModule$set_moduleowner()","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyModel.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Base module for diseasy model templates — DiseasyModel","text":"DiseasyModel$new() DiseasyModel$get_results() DiseasyModel$get_training_data() DiseasyModel$clone()","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyModel.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Base module for diseasy model templates — DiseasyModel","text":"Creates new instance DiseasyModel R6 class. module typically constructed directly rather DiseasyModel* classes.","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyModel.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Base module for diseasy model templates — DiseasyModel","text":"","code":"DiseasyModel$new(   activity = FALSE,   observables = FALSE,   season = FALSE,   variant = FALSE,   parameters = NULL,   label = NULL,   ... )"},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyModel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Base module for diseasy model templates — DiseasyModel","text":"activity, observables, season, variant (boolean R6::R6Class instance) boolean given, dictates whether load new instance module class. instance module provided instead, copy instance added DiseasyModel instance. copy \"clone\" instance time added subsequent changes instance reflect copy added DiseasyModel. parameters (named list()) List parameters set model initialization. model parameters. Common parameters : training_length (named numeric)   number days included training splits data model.   Allowed splits : \"training\", \"testing\", \"validation\". label (character) human readable label model instance. ... Parameters sent DiseasyBaseModule R6 constructor","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyModel.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Base module for diseasy model templates — DiseasyModel","text":"DiseasyModel main template individual models inherit since defines set methods later framework expects model. addition, provides main interface modules framework.","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyModel.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Base module for diseasy model templates — DiseasyModel","text":"new instance DiseasyModel R6 class.","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyModel.html","id":"method-get-results-","dir":"Reference","previous_headings":"","what":"Method get_results()","title":"Base module for diseasy model templates — DiseasyModel","text":"primary method used request model results given observable given stratification","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyModel.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Base module for diseasy model templates — DiseasyModel","text":"","code":"DiseasyModel$get_results(   observable,   prediction_length,   quantiles = NULL,   stratification = NULL )"},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyModel.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Base module for diseasy model templates — DiseasyModel","text":"observable (character) observable provide data prediction . prediction_length (numeric) number days predict. prediction start defined last_queryable_date DiseasyObservables R6 class. quantiles (list(numeric)) Default NULL. given, results returned quantiles given. stratification (list(quosures)) Default NULL. Use rlang::quos(...) specify stratification. given, expressions stratification evaluated give stratification level.","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyModel.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Base module for diseasy model templates — DiseasyModel","text":"tibble tibble::tibble predictions level specified stratification level. addition stratification columns, output columns:   date (Date) specifying date prediction   realization_id (character) giving unique id realization ensemble   model (character) name (classname) model used provide prediction.","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyModel.html","id":"method-get-training-data-","dir":"Reference","previous_headings":"","what":"Method get_training_data()","title":"Base module for diseasy model templates — DiseasyModel","text":"method returns training data models based model value training_length last_queryable_date DiseasyObservables module.","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyModel.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Base module for diseasy model templates — DiseasyModel","text":"","code":"DiseasyModel$get_training_data(observable, stratification = NULL)"},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyModel.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Base module for diseasy model templates — DiseasyModel","text":"observable (character) observable provide data prediction . stratification (list(quosures)) Default NULL. Use rlang::quos(...) specify stratification. given, expressions stratification evaluated give stratification level.","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyModel.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"Base module for diseasy model templates — DiseasyModel","text":"output DiseasyObservables$get_observation constrained training period.","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyModel.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Base module for diseasy model templates — DiseasyModel","text":"objects class cloneable method.","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyModel.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Base module for diseasy model templates — DiseasyModel","text":"","code":"DiseasyModel$clone(deep = FALSE)"},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyModel.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Base module for diseasy model templates — DiseasyModel","text":"deep Whether make deep clone.","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyModel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Base module for diseasy model templates — DiseasyModel","text":"","code":"# Normally, one would not want to create this module directly, but it is possible.   Model_module <- DiseasyModel$new()    rm(Model_module)"},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyObservables.html","id":null,"dir":"Reference","previous_headings":"","what":"Diseasy' observables handler — DiseasyObservables","title":"Diseasy' observables handler — DiseasyObservables","text":"DiseasyObservables module responsible interfacing available diseasystores provide disease data models. module primarily acts convenience wrapper around diseasystores. observables stratifications therefore depend data made available diseasystores. See vignette(\"diseasy-observables\")","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyObservables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Diseasy' observables handler — DiseasyObservables","text":"new instance DiseasyBaseModule R6 class.","code":""},{"path":[]},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyObservables.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Diseasy' observables handler — DiseasyObservables","text":"diseasy::DiseasyBaseModule -> DiseasyObservables","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyObservables.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Diseasy' observables handler — DiseasyObservables","text":"diseasystore (character) set diseasystore get DiseasyObservables . Read-. start_date (Date) Study period start. Read . end_date (Date) Study period end. Read . last_queryable_date (Date) latest date can queried. Read-. ds (Diseasystore*) currently loaded diseasystore provides features. Read-. available_observables (character) currently available observables loaded diseasystore. Read-. available_stratifications (character) currently available stratifications loaded diseasystore. Read-. slice_ts (Date character) Date timestamp (parsable .POSIXct) slice (time-versioned) data . Read . conn (DBIConnection) database connection. Read .","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyObservables.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Diseasy' observables handler — DiseasyObservables","text":"diseasy::DiseasyBaseModule$load_module() diseasy::DiseasyBaseModule$set_moduleowner()","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyObservables.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Diseasy' observables handler — DiseasyObservables","text":"DiseasyObservables$new() DiseasyObservables$set_diseasystore() DiseasyObservables$set_last_queryable_date() DiseasyObservables$set_study_period() DiseasyObservables$set_slice_ts() DiseasyObservables$get_observation() DiseasyObservables$describe() DiseasyObservables$finalize() DiseasyObservables$clone()","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyObservables.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Diseasy' observables handler — DiseasyObservables","text":"Creates new instance DiseasyObservables R6 class.","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyObservables.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Diseasy' observables handler — DiseasyObservables","text":"","code":"DiseasyObservables$new(   diseasystore = NULL,   start_date = NULL,   end_date = NULL,   last_queryable_date = NULL,   conn = NULL,   slice_ts = NULL,   ... )"},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyObservables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Diseasy' observables handler — DiseasyObservables","text":"diseasystore (character) character string controls feature store get data . start_date (Date) Study period start. Used default values get_observation. end_date (Date) Study period end. Used default values get_observation. last_queryable_date (Date) Enforce limit data can pulled (date). conn (DBIConnection) database connection. slice_ts (Date character) Date timestamp (parsable .POSIXct) slice (time-versioned) data . ... Parameters sent DiseasyBaseModule R6 constructor.","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyObservables.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Diseasy' observables handler — DiseasyObservables","text":"new instance DiseasyBaseModule R6 class.","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyObservables.html","id":"method-set-diseasystore-","dir":"Reference","previous_headings":"","what":"Method set_diseasystore()","title":"Diseasy' observables handler — DiseasyObservables","text":"Set case definition get DiseasyObservables .","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyObservables.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Diseasy' observables handler — DiseasyObservables","text":"","code":"DiseasyObservables$set_diseasystore(diseasystore, verbose = NULL)"},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyObservables.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Diseasy' observables handler — DiseasyObservables","text":"diseasystore (character) Text label disease get DiseasyObservables . Must match case definition implemented diseasystore package. verbose (logical) diseasystore use verbose outputs?","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyObservables.html","id":"method-set-last-queryable-date-","dir":"Reference","previous_headings":"","what":"Method set_last_queryable_date()","title":"Diseasy' observables handler — DiseasyObservables","text":"Enforce limit data can pulled.","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyObservables.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Diseasy' observables handler — DiseasyObservables","text":"","code":"DiseasyObservables$set_last_queryable_date(last_queryable_date)"},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyObservables.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Diseasy' observables handler — DiseasyObservables","text":"last_queryable_date (Date) DiseasyObservables module return data date.","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyObservables.html","id":"method-set-study-period-","dir":"Reference","previous_headings":"","what":"Method set_study_period()","title":"Diseasy' observables handler — DiseasyObservables","text":"Set (default) time period get observations .","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyObservables.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Diseasy' observables handler — DiseasyObservables","text":"","code":"DiseasyObservables$set_study_period(start_date, end_date)"},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyObservables.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Diseasy' observables handler — DiseasyObservables","text":"start_date (Date) Study period start. end_date (Date) Study period end.","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyObservables.html","id":"method-set-slice-ts-","dir":"Reference","previous_headings":"","what":"Method set_slice_ts()","title":"Diseasy' observables handler — DiseasyObservables","text":"Set slice_ts get data ","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyObservables.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Diseasy' observables handler — DiseasyObservables","text":"","code":"DiseasyObservables$set_slice_ts(slice_ts)"},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyObservables.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Diseasy' observables handler — DiseasyObservables","text":"slice_ts (Date character) Date timestamp (parsable .POSIXct) slice (time-versioned) data .","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyObservables.html","id":"method-get-observation-","dir":"Reference","previous_headings":"","what":"Method get_observation()","title":"Diseasy' observables handler — DiseasyObservables","text":"Retrieve \"observable\" data set corresponding set diseasystore. default, internal values start_date end_date used return data, can overwritten. results cached faster retrieval subsequent calls.","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyObservables.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Diseasy' observables handler — DiseasyObservables","text":"","code":"DiseasyObservables$get_observation(   observable,   stratification = NULL,   start_date = self %.% start_date,   end_date = self %.% end_date )"},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyObservables.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"Diseasy' observables handler — DiseasyObservables","text":"observable (character) observable provide data prediction . stratification (list(quosures)) Default NULL. Use rlang::quos(...) specify stratification. given, expressions stratification evaluated give stratification level. start_date (Date) Study period start. end_date (Date) Study period end.","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyObservables.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Diseasy' observables handler — DiseasyObservables","text":"observable found, function returns corresponding data stratification level. Otherwise, function fails lists available DiseasyObservables diseasystore.","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyObservables.html","id":"method-describe-","dir":"Reference","previous_headings":"","what":"Method describe()","title":"Diseasy' observables handler — DiseasyObservables","text":"Prints human readable report internal state module.","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyObservables.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Diseasy' observables handler — DiseasyObservables","text":"","code":"DiseasyObservables$describe()"},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyObservables.html","id":"method-finalize-","dir":"Reference","previous_headings":"","what":"Method finalize()","title":"Diseasy' observables handler — DiseasyObservables","text":"Handles clean-class","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyObservables.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"Diseasy' observables handler — DiseasyObservables","text":"","code":"DiseasyObservables$finalize()"},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyObservables.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Diseasy' observables handler — DiseasyObservables","text":"objects class cloneable method.","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyObservables.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"Diseasy' observables handler — DiseasyObservables","text":"","code":"DiseasyObservables$clone(deep = FALSE)"},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyObservables.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"Diseasy' observables handler — DiseasyObservables","text":"deep Whether make deep clone.","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyObservables.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Diseasy' observables handler — DiseasyObservables","text":"","code":"# Create observables module using the Google COVID-19 data   obs <- DiseasyObservables$new(diseasystore = \"Google COVID-19\",                                 conn = DBI::dbConnect(RSQLite::SQLite()))    # See available observables   print(obs$available_observables) #> [1] \"n_population\" \"n_hospital\"   \"n_deaths\"     \"n_positive\"   \"n_icu\"        #> [6] \"n_ventilator\"   print(obs$available_stratifications) #> [1] \"age_group\"       \"country_id\"      \"country\"         \"region_id\"       #> [5] \"region\"          \"subregion_id\"    \"subregion\"       \"min_temperature\" #> [9] \"max_temperature\"    # Get data for one observable   if (FALSE) { # \\dontrun{   obs$get_observation(\"n_hospital\",                       start_date = as.Date(\"2020-03-01\"),                       end_date = as.Date(\"2020-03-05\"))   } # }   rm(obs)"},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasySeason.html","id":null,"dir":"Reference","previous_headings":"","what":"Diseasy' season handler — DiseasySeason","title":"Diseasy' season handler — DiseasySeason","text":"DiseasySeason module responsible implementing various models seasonal dependency diseases. module implements number season models different functional forms. Models season either extracted module get_* functions module configured use models internally use_* functions whereafter model can accessed $model_t() $model_date(). season model varying number parameters. See documentation details. See vignette(\"diseasy-season\") examples use.","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasySeason.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Diseasy' season handler — DiseasySeason","text":"new instance DiseasySeason R6 class.","code":""},{"path":[]},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasySeason.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Diseasy' season handler — DiseasySeason","text":"diseasy::DiseasyBaseModule -> DiseasySeason","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasySeason.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Diseasy' season handler — DiseasySeason","text":"reference_date (Date) reference date season models. Read-. model_t (function) model currently used module (days past reference date). Read-. model_date (function) model currently used module (date interest). Read-. available_season_models (character) list available season models observables (diseasy::DiseasyObservables) local copy DiseasyObservables module. Read-.","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasySeason.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Diseasy' season handler — DiseasySeason","text":"diseasy::DiseasyBaseModule$finalize() diseasy::DiseasyBaseModule$load_module() diseasy::DiseasyBaseModule$set_moduleowner()","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasySeason.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Diseasy' season handler — DiseasySeason","text":"DiseasySeason$new() DiseasySeason$set_reference_date() DiseasySeason$set_scale() DiseasySeason$get_season_model() DiseasySeason$use_season_model() DiseasySeason$get_constant_season() DiseasySeason$use_constant_season() DiseasySeason$get_cosine_season() DiseasySeason$use_cosine_season() DiseasySeason$get_covid_season_v1() DiseasySeason$use_covid_season_v1() DiseasySeason$get_covid_season_v2() DiseasySeason$use_covid_season_v2() DiseasySeason$describe() DiseasySeason$clone()","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasySeason.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Diseasy' season handler — DiseasySeason","text":"Creates new instance DiseasySeason R6 class.","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasySeason.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Diseasy' season handler — DiseasySeason","text":"","code":"DiseasySeason$new(reference_date = NULL, observables = NULL, ...)"},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasySeason.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Diseasy' season handler — DiseasySeason","text":"reference_date (Date) Date season modifier computed relatively . observables (R6::R6Class instance) instance DiseasyObservables needed season models. ... parameters sent DiseasyBaseModule R6 constructor.","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasySeason.html","id":"method-set-reference-date-","dir":"Reference","previous_headings":"","what":"Method set_reference_date()","title":"Diseasy' season handler — DiseasySeason","text":"Sets reference_date DiseasySeason module.","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasySeason.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Diseasy' season handler — DiseasySeason","text":"","code":"DiseasySeason$set_reference_date(reference_date)"},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasySeason.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Diseasy' season handler — DiseasySeason","text":"reference_date (Date) Date season modifier computed relatively .","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasySeason.html","id":"method-set-scale-","dir":"Reference","previous_headings":"","what":"Method set_scale()","title":"Diseasy' season handler — DiseasySeason","text":"Sets scale active season model.","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasySeason.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Diseasy' season handler — DiseasySeason","text":"","code":"DiseasySeason$set_scale(scale)"},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasySeason.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Diseasy' season handler — DiseasySeason","text":"scale (numeric) Sets scale season model. scale percent wise difference active least active period. Read .","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasySeason.html","id":"method-get-season-model-","dir":"Reference","previous_headings":"","what":"Method get_season_model()","title":"Diseasy' season handler — DiseasySeason","text":"Retrieves specified season model.","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasySeason.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Diseasy' season handler — DiseasySeason","text":"","code":"DiseasySeason$get_season_model(model_name, dots = NULL)"},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasySeason.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Diseasy' season handler — DiseasySeason","text":"model_name (character) Name season_model use (calls equivalent $get_<model_name>()). dots (list) Named list arguments passed dot-ellipsis season model.","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasySeason.html","id":"method-use-season-model-","dir":"Reference","previous_headings":"","what":"Method use_season_model()","title":"Diseasy' season handler — DiseasySeason","text":"Sets DiseasySeason module use specified season model.","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasySeason.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Diseasy' season handler — DiseasySeason","text":"","code":"DiseasySeason$use_season_model(model_name, dots = NULL)"},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasySeason.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Diseasy' season handler — DiseasySeason","text":"model_name (character) Name season_model use (calls equivalent $use_<model_name>()). dots (list) Named list arguments passed dot-ellipsis season model.","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasySeason.html","id":"method-get-constant-season-","dir":"Reference","previous_headings":"","what":"Method get_constant_season()","title":"Diseasy' season handler — DiseasySeason","text":"Retrieves season model constant value (1).","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasySeason.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Diseasy' season handler — DiseasySeason","text":"","code":"DiseasySeason$get_constant_season()"},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasySeason.html","id":"method-use-constant-season-","dir":"Reference","previous_headings":"","what":"Method use_constant_season()","title":"Diseasy' season handler — DiseasySeason","text":"Sets season module use constant value (1).","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasySeason.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Diseasy' season handler — DiseasySeason","text":"","code":"DiseasySeason$use_constant_season()"},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasySeason.html","id":"method-get-cosine-season-","dir":"Reference","previous_headings":"","what":"Method get_cosine_season()","title":"Diseasy' season handler — DiseasySeason","text":"Retrieves season model cosine relationship.","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasySeason.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"Diseasy' season handler — DiseasySeason","text":"","code":"DiseasySeason$get_cosine_season(peak = 20.09946, scale = 0.5726693)"},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasySeason.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"Diseasy' season handler — DiseasySeason","text":"peak (numeric) Sets period maximal activity (days past new-year). default, risk infection antiphase DMI climate normal maximum daily temperature. scale (numeric) Sets scale season model. scale percent wise difference active least active period.","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasySeason.html","id":"method-use-cosine-season-","dir":"Reference","previous_headings":"","what":"Method use_cosine_season()","title":"Diseasy' season handler — DiseasySeason","text":"Sets DiseasySeason module use cosine model season.","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasySeason.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"Diseasy' season handler — DiseasySeason","text":"","code":"DiseasySeason$use_cosine_season(peak = 20.09946, scale = 0.5726693)"},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasySeason.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"Diseasy' season handler — DiseasySeason","text":"peak (numeric) Sets period maximal activity (days past new-year). default, risk infection antiphase DMI climate normal maximum daily temperature. scale (numeric) Sets scale season model. scale percent wise difference active least active period.","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasySeason.html","id":"method-get-covid-season-v-","dir":"Reference","previous_headings":"","what":"Method get_covid_season_v1()","title":"Diseasy' season handler — DiseasySeason","text":"Retrieves first version COVID-19 season model.","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasySeason.html","id":"usage-9","dir":"Reference","previous_headings":"","what":"Usage","title":"Diseasy' season handler — DiseasySeason","text":"","code":"DiseasySeason$get_covid_season_v1(scale = 0.4825524)"},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasySeason.html","id":"arguments-7","dir":"Reference","previous_headings":"","what":"Arguments","title":"Diseasy' season handler — DiseasySeason","text":"scale (numeric) Sets scale season model. scale percent wise difference active least active period.","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasySeason.html","id":"method-use-covid-season-v-","dir":"Reference","previous_headings":"","what":"Method use_covid_season_v1()","title":"Diseasy' season handler — DiseasySeason","text":"Sets DiseasySeason module use first version covid 19 season model","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasySeason.html","id":"usage-10","dir":"Reference","previous_headings":"","what":"Usage","title":"Diseasy' season handler — DiseasySeason","text":"","code":"DiseasySeason$use_covid_season_v1(scale = 0.4825524)"},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasySeason.html","id":"arguments-8","dir":"Reference","previous_headings":"","what":"Arguments","title":"Diseasy' season handler — DiseasySeason","text":"scale (numeric) Sets scale season model. scale percent wise difference active least active period.","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasySeason.html","id":"method-get-covid-season-v--1","dir":"Reference","previous_headings":"","what":"Method get_covid_season_v2()","title":"Diseasy' season handler — DiseasySeason","text":"Retrieves second version COVID-19 season model.","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasySeason.html","id":"usage-11","dir":"Reference","previous_headings":"","what":"Usage","title":"Diseasy' season handler — DiseasySeason","text":"","code":"DiseasySeason$get_covid_season_v2(scale = 0.5042782)"},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasySeason.html","id":"arguments-9","dir":"Reference","previous_headings":"","what":"Arguments","title":"Diseasy' season handler — DiseasySeason","text":"scale (numeric) Sets scale season model. scale percent wise difference active least active period.","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasySeason.html","id":"method-use-covid-season-v--1","dir":"Reference","previous_headings":"","what":"Method use_covid_season_v2()","title":"Diseasy' season handler — DiseasySeason","text":"Sets DiseasySeason module use second version COVID-19 season model","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasySeason.html","id":"usage-12","dir":"Reference","previous_headings":"","what":"Usage","title":"Diseasy' season handler — DiseasySeason","text":"","code":"DiseasySeason$use_covid_season_v2(scale = 0.5042782)"},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasySeason.html","id":"arguments-10","dir":"Reference","previous_headings":"","what":"Arguments","title":"Diseasy' season handler — DiseasySeason","text":"scale (numeric) Sets scale season model. scale percent wise difference active least active period.","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasySeason.html","id":"method-describe-","dir":"Reference","previous_headings":"","what":"Method describe()","title":"Diseasy' season handler — DiseasySeason","text":"Prints human readable report internal state module.","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasySeason.html","id":"usage-13","dir":"Reference","previous_headings":"","what":"Usage","title":"Diseasy' season handler — DiseasySeason","text":"","code":"DiseasySeason$describe()"},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasySeason.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Diseasy' season handler — DiseasySeason","text":"objects class cloneable method.","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasySeason.html","id":"usage-14","dir":"Reference","previous_headings":"","what":"Usage","title":"Diseasy' season handler — DiseasySeason","text":"","code":"DiseasySeason$clone(deep = FALSE)"},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasySeason.html","id":"arguments-11","dir":"Reference","previous_headings":"","what":"Arguments","title":"Diseasy' season handler — DiseasySeason","text":"deep Whether make deep clone.","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasySeason.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Diseasy' season handler — DiseasySeason","text":"","code":"# Season module with an constant season   s1 <- DiseasySeason$new()    x <- 0:365   plot(x, purrr::map_dbl(x, s1$model_t))     # Season module with an consine season   s2 <- DiseasySeason$new(reference_date = Sys.Date())   s2$use_cosine_season()   plot(x, purrr::map_dbl(x, s2$model_t))     rm(s1, s2)"},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyVariant.html","id":null,"dir":"Reference","previous_headings":"","what":"Diseasy' variant handler — DiseasyVariant","title":"Diseasy' variant handler — DiseasyVariant","text":"DiseasyVariant module responsible defining scenarios disease variants models See vignette(\"diseasy-variant\")","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyVariant.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Diseasy' variant handler — DiseasyVariant","text":"new instance DiseasyVariant R6 class.","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyVariant.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Diseasy' variant handler — DiseasyVariant","text":"diseasy::DiseasyBaseModule -> DiseasyVariant","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyVariant.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Diseasy' variant handler — DiseasyVariant","text":"variants (list) variants currently module. Read-. cross_immunity (matrix) matrix indicating cross immunity interactions variants. Index ij indicates overlap immunity variant j infects variant . Thus, overlap 1 means immunisation variant protects infection variant j. Read-.","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyVariant.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Diseasy' variant handler — DiseasyVariant","text":"diseasy::DiseasyBaseModule$finalize() diseasy::DiseasyBaseModule$initialize() diseasy::DiseasyBaseModule$load_module() diseasy::DiseasyBaseModule$set_moduleowner()","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyVariant.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Diseasy' variant handler — DiseasyVariant","text":"DiseasyVariant$add_variant() DiseasyVariant$describe() DiseasyVariant$clone()","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyVariant.html","id":"method-add-variant-","dir":"Reference","previous_headings":"","what":"Method add_variant()","title":"Diseasy' variant handler — DiseasyVariant","text":"Add variant scenario.","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyVariant.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Diseasy' variant handler — DiseasyVariant","text":"","code":"DiseasyVariant$add_variant(name, characteristics = list())"},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyVariant.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Diseasy' variant handler — DiseasyVariant","text":"name (character(1)) name variant. characteristics (list) named list characteristics variant. Characteristics can : - relative_infection_risk (numeric(1)): relative infection risk variant. - cross_immunity (named vector): overlap immunity named variant attempts infect host previously infected current variant. specified, default 1. - introduction_date (Date(1)): date variant introduced population.","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyVariant.html","id":"method-describe-","dir":"Reference","previous_headings":"","what":"Method describe()","title":"Diseasy' variant handler — DiseasyVariant","text":"Prints human readable report internal state module.","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyVariant.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Diseasy' variant handler — DiseasyVariant","text":"","code":"DiseasyVariant$describe()"},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyVariant.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Diseasy' variant handler — DiseasyVariant","text":"objects class cloneable method.","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyVariant.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Diseasy' variant handler — DiseasyVariant","text":"","code":"DiseasyVariant$clone(deep = FALSE)"},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyVariant.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Diseasy' variant handler — DiseasyVariant","text":"deep Whether make deep clone.","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/DiseasyVariant.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Diseasy' variant handler — DiseasyVariant","text":"","code":"# Create variant module   var <- DiseasyVariant$new()    # By default, a no variants are included   var$variants #> NULL    # Add variants via the `$add_variant()` method    var$add_variant(name = \"WT\")   var$add_variant(name = \"Mutant\", characteristics = list(\"relative_infection_risk\" = 1.2))   var$variants #> $WT #> list() #>  #> $Mutant #> $Mutant$relative_infection_risk #> [1] 1.2 #>  #>     rm(var)"},{"path":"https://ssi-dk.github.io/diseasy/reference/contact_basis.html","id":null,"dir":"Reference","previous_headings":"","what":"Contact basis — contact_basis","title":"Contact basis — contact_basis","text":"data set contains contact matrices population data 176 geographical regions. contact matrices uses data provided contactdata package population data provided US Census Bureau.","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/contact_basis.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Contact basis — contact_basis","text":"U.S. Census Bureau. (n.d.). International Database: World Population Estimates Projections. U.S. Department Commerce. Retrieved October 03, 2024, https://data.census.gov/ Gruson H (2023). \"contactdata: Social Contact Matrices 152 Countries.\" R package version 1.0.0, https://CRAN.R-project.org/package=contactdata. Prem K, Cook AR, Jit M (2017). \"Projecting social contact matrices 152 countries using contact surveys demographic data.\" PLoS Computational Biology, 13(9), e1005697. doi:10.1371/journal.pcbi.1005697 https://doi.org/10.1371/journal.pcbi.1005697. Prem K, van Zandvoort K, Klepac P, Eggo RM, Davies NG, Group CCW, Cook AR, Jit M (2021). \"Projecting contact matrices 177 geographical regions: update comparison empirical data COVID-19 era.\" PLoS Computational Biology, 17(7), e1009098. doi:10.1371/journal.pcbi.1009098 https://doi.org/10.1371/journal.pcbi.1009098.","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/contact_basis.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Contact basis — contact_basis","text":"contact matrices provided four arenas: \"Work\", \"Home\", \"School\", \"\" 5-year age groups. diseasy SEIR models configured use specific transformation contact matrices. make definition \"contact\" matrix clear, lets start definitions paper: https://www.medrxiv.org/content/10.1101/2020.02.16.20023754v2.full.pdf m_ij raw contact matrix elements age group age group j c_ij reciprocal contact matrix elements w_i  proportion population fall age group diseasy SEIR models configured use symmetric, weighted set contacts matrices elements 0.5 * (c_ij * w_j + c_ji * w_i) Since contactdata package gives number contacts directly (framework, denoted X_ij), transform elements intermediaries:  m_ij = X_ij / w_j c_ij = m_ij * w_i = X_ij * w_i / w_j population data includes proportion population 5-year age groups well information 1-year age-groups allow transformation contact matrices age cuts. product uses Census Bureau Data API endorsed certified Census Bureau.","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/contact_basis.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Contact basis — contact_basis","text":"Rasmus Skytte Randl\\u00F8v rske@ssi.dk Lasse Engbo Christiansen lsec@ssi.dk","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/diseasy-package.html","id":null,"dir":"Reference","previous_headings":"","what":"diseasy: Disease Ensemble Modelling Made Easy — diseasy-package","title":"diseasy: Disease Ensemble Modelling Made Easy — diseasy-package","text":"package facilitates creation ensemble models modular construction combinatorics.","code":""},{"path":[]},{"path":"https://ssi-dk.github.io/diseasy/reference/diseasy-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"diseasy: Disease Ensemble Modelling Made Easy — diseasy-package","text":"Maintainer: Rasmus Skytte Randløv rske@ssi.dk (ORCID) Authors: Marcus Munch Grünewald mmgr@ssi.dk (ORCID) Lasse Engbo Christiansen lsec@ssi.dk (ORCID) Kaare Græsbøll kagr@ssi.dk (ORCID) contributors: Statens Serum Institut, SSI [copyright holder, funder]","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/diseasyoption.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to get options related to diseasy — diseasyoption","title":"Helper function to get options related to diseasy — diseasyoption","text":"Helper function get options related diseasy","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/diseasyoption.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to get options related to diseasy — diseasyoption","text":"","code":"diseasyoption(option, class = NULL, namespace = NULL, .default = NULL)"},{"path":"https://ssi-dk.github.io/diseasy/reference/diseasyoption.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function to get options related to diseasy — diseasyoption","text":"option (character(1)) Name option get. class (character(1) R6::R6class Diseasy* instance) Either classname object option applies . namespace (character(1)) namespace option (e.g. \"diseasy\" \"diseasystore\"). .default () default value return option set.","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/diseasyoption.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function to get options related to diseasy — diseasyoption","text":"option given, specific option within diseasy framework given option class. option missing, options related diseasy packages.","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/diseasyoption.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper function to get options related to diseasy — diseasyoption","text":"","code":"# Retrieve default option for source conn   diseasyoption(\"source_conn\") #> NULL    # Retrieve DiseasystoreGoogleCovid19 specific option for source conn   diseasyoption(\"source_conn\", \"DiseasystoreGoogleCovid19\") #> [1] \"https://storage.googleapis.com/covid19-open-data/v3/\"    # Try to retrieve specific option for source conn for a non existent / un-configured diseasystore   diseasyoption(\"source_conn\", \"DiseasystoreNonExistent\") # Returns default source_conn #> NULL    # Try to retrieve specific non-existent option   diseasyoption(\"non_existent\", \"DiseasystoreGoogleCovid19\", .default = \"Use this\") #> [1] \"Use this\""},{"path":"https://ssi-dk.github.io/diseasy/reference/dk_activity_units.html","id":null,"dir":"Reference","previous_headings":"","what":"dk_activity_units — dk_activity_units","title":"dk_activity_units — dk_activity_units","text":"data set contains \"units\" activity developed Danish COVID-19 modelling efforts. \"activity unit\" specifies amount activity four arenas: Home, Work, School, . combining units activity, complete, granular picture societal activity formed (see dk_reference_scenario details).","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/dk_activity_units.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"dk_activity_units — dk_activity_units","text":"units developed cover proposed realized scenarios societal restrictions COVID-19 pandemic Denmark. scenarios tested, new \"activity units\" (likely) developed. supply script generates units package (see data-raw/dk-activity-units.R details).","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/dk_activity_units.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"dk_activity_units — dk_activity_units","text":"Lasse Engbo Christiansen lsec@ssi.dk Carsten Kirkeby ckir@sund.ku.dk Frederik Plesner Lyngse frederik.lyngse@sund.ku.dk Adam Mielke admi@dtu.dk Rasmus Skytte Randl\\u00F8v rske@dtu.dk","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/dk_reference_scenario.html","id":null,"dir":"Reference","previous_headings":"","what":"dk_reference_scenario — dk_reference_scenario","title":"dk_reference_scenario — dk_reference_scenario","text":"data set contains combination \"activity units\" (see dk_activity_units details) form description societal activity Denmark COVID-19 pandemic.","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/dk_reference_scenario.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"dk_reference_scenario — dk_reference_scenario","text":"data set consists tibble four columns: date opening closing social_distance_work date indicates date activity change opening indicates \"activity unit\" added scenario given date closing indicates \"activity unit\" removed scenario given date social_distance_work indicates reduction transmission risk \"Work\" arena due social distancing","code":""},{"path":"https://ssi-dk.github.io/diseasy/reference/dk_reference_scenario.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"dk_reference_scenario — dk_reference_scenario","text":"Lasse Engbo Christiansen lsec@ssi.dk","code":""},{"path":[]},{"path":"https://ssi-dk.github.io/diseasy/news/index.html","id":"features-0-0-0-9000","dir":"Changelog","previous_headings":"","what":"Features:","title":"diseasy 0.0.0.9000","text":"DiseasyBaseModule: baseline diseasy modules. Key features: caching system using cachem computation can stored memory disk persistence (#130). DiseasyVariant: functional module implement scenarios disease variants (#111). DiseasyModel: base class model templates (#36). R6 class defines interface models empower flexible configuration models functional modules. model class system model parameters (#116): Parameters easily overview via $parameters binding. Parameters type-checked setting. Parameters can easily adjusted model initialisation. Parameters inherited super classes needed.","code":""},{"path":"https://ssi-dk.github.io/diseasy/news/index.html","id":"documentation-0-0-0-9000","dir":"Changelog","previous_headings":"","what":"Documentation:","title":"diseasy 0.0.0.9000","text":"functions fully documented. Vignettes use package included. vignette(\"diseasy\") vignette(\"creating--model\")","code":""}]
